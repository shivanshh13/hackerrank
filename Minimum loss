#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

typedef struct {
    long price;
    int index;
} PriceIndex;

int compare(const void *a, const void *b) {
    PriceIndex *pa = (PriceIndex *)a;
    PriceIndex *pb = (PriceIndex *)b;
    if (pa->price < pb->price) return -1;
    if (pa->price > pb->price) return 1;
    return 0;
}

long minimumLoss(int n, long *price) {
    PriceIndex *arr = (PriceIndex *)malloc(n * sizeof(PriceIndex));
    
    for (int i = 0; i < n; i++) {
        arr[i].price = price[i];
        arr[i].index = i;
    }
    
    qsort(arr, n, sizeof(PriceIndex), compare);
    
    long minLoss = LONG_MAX;
    
    for (int i = 0; i < n - 1; i++) {
        if (arr[i].index > arr[i + 1].index) {
            long loss = arr[i + 1].price - arr[i].price;
            if (loss < minLoss) {
                minLoss = loss;
            }
        }
    }
    
    free(arr);
    return minLoss;
}

int main() {
    int n;
    scanf("%d", &n);
    
    long *price = (long *)malloc(n * sizeof(long));
    for (int i = 0; i < n; i++) {
        scanf("%ld", &price[i]);
    }
    
    printf("%ld\n", minimumLoss(n, price));
    
    free(price);
    return 0;
}
