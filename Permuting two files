#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Comparison function for ascending sort (for array A)
int compare_ascending(const void* a, const void* b) {
    return (*(int*)a - *(int*)b);
}

// Comparison function for descending sort (for array B)
int compare_descending(const void* a, const void* b) {
    return (*(int*)b - *(int*)a);
}

/**
 * @brief Determines if two arrays A and B can be permuted into A' and B' such that A'[i] + B'[i] >= k for all i.
 * * @param k The minimum required sum for each pair.
 * @param A Array of integers.
 * @param B Array of integers.
 * @param n The size of the arrays.
 * @return char* "YES" if a valid permutation exists, "NO" otherwise.
 */
char* twoArrays(int k, int A_count, int* A, int B_count, int* B) {
    // Both arrays must have the same size, which is A_count (or B_count).
    int n = A_count;
    
    // 1. Sort A in ascending order.
    qsort(A, n, sizeof(int), compare_ascending);
    
    // 2. Sort B in descending order.
    qsort(B, n, sizeof(int), compare_descending);
    
    // 3. Check the condition for all paired elements.
    for (int i = 0; i < n; i++) {
        // Pair the smallest from A with the largest from B, and so on.
        if (A[i] + B[i] < k) {
            // If even one pair fails the condition, no valid permutation exists.
            return "NO";
        }
    }
    
    // If all pairs satisfy the condition, a valid permutation exists.
    return "YES";
}

int main() {
    int q;
    // Read the number of queries
    if (scanf("%d", &q) != 1) return 1;

    for (int i = 0; i < q; i++) {
        int n, k;
        // Read n (array size) and k (minimum sum)
        if (scanf("%d %d", &n, &k) != 2) return 1;

        // Allocate memory for A and B
        int* A = (int*)malloc(n * sizeof(int));
        int* B = (int*)malloc(n * sizeof(int));
        if (A == NULL || B == NULL) return 1;

        // Read array A
        for (int j = 0; j < n; j++) {
            if (scanf("%d", &A[j]) != 1) {
                free(A); free(B);
                return 1;
            }
        }

        // Read array B
        for (int j = 0; j < n; j++) {
            if (scanf("%d", &B[j]) != 1) {
                free(A); free(B);
                return 1;
            }
        }

        // Call the function and print the result
        char* result = twoArrays(k, n, A, n, B);
        printf("%s\n", result);

        // Free the allocated memory
        free(A);
        free(B);
    }

    return 0;
}
